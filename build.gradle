import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'org.example'
version = loadVersion()

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation project(":pni")
}

java {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

jar {
    archiveFileName = 'pni.jar'
    manifest {
        attributes 'Main-Class': 'io.vproxy.pni.exec.Main'
    }
}

shadowJar {
    archiveBaseName = 'pni'
    archiveClassifier = ''
    archiveVersion = ''
}

subprojects {
    apply plugin: 'java'

    group 'io.vproxy'
    version rootProject.version

    if (project.name != 'pni') {
        java {
            toolchain {
                languageVersion = JavaLanguageVersion.of(21)
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.incremental = false
        if (project.name != 'pni') {
            options.compilerArgs += '--enable-preview'
        }
    }
    tasks.withType(JavaExec) {
        if (project.name != 'pni') {
            jvmArgs += '--enable-preview'
            jvmArgs += '--enable-native-access=ALL-UNNAMED'
            javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
        }
    }
    tasks.withType(Test) {
        if (project.name != 'pni') {
            jvmArgs += '--enable-preview'
            jvmArgs += '--enable-native-access=ALL-UNNAMED'
        }

        testLogging {
            events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STARTED
            maxGranularity 100
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
            showStandardStreams true
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from "$buildDir/docs/javadoc"
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

project(":api") {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java {
        withSourcesJar()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifactId 'pni-' + project.name + '-jdk21'

                artifact(javadocJar)

                pom {
                    name = 'io.vproxy.pni-' + project.name
                    description = 'panama native interface ' + project.name
                    url = 'https://vproxy.io'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/vproxy-tools/panama-native-interface/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'wkgcass'
                            name = 'K.G. Wang'
                            email = 'wkgcass@hotmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/vproxy-tools/panama-native-interface.git'
                        developerConnection = 'scm:git:git://github.com/vproxy-tools/panama-native-interface.git'
                        url = 'https://github.com/vproxy-tools/panama-native-interface'
                    }
                }
                pom.withXml {
                    def pomNode = asNode()
                    pomNode.dependencies.'*'.findAll() {
                        it.groupId.text() == 'org.jetbrains.kotlin' || it.groupId.text() == 'org.jetbrains.kotlinx'
                    }.each {
                        it.parent().remove(it)
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username 'wkgcass'
                    password System.getProperty("MavenPublishPassword")
                }
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.contains('-DEV') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }
    if (!System.getProperty("MavenLocalInstall", "false").equals("true")) {
        signing {
            sign publishing.publications.maven
        }
    }
}

project(":pni") {
    java {
        sourceCompatibility = '11'
        targetCompatibility = '11'
    }
    dependencies {
        implementation 'org.ow2.asm:asm:9.5'
        implementation 'org.ow2.asm:asm-tree:9.5'
    }
}

project(":unittest") {
    dependencies {
        implementation project(":api")
        implementation project(":pni")
        testImplementation 'junit:junit:4.13.2'
    }
    task runUnitTest(type: Test) {
        include '**/Suite.class'
    }
}

project(":acceptance-testing-template") {
    compileJava {
        options.compilerArgs += '-parameters'
    }
    dependencies {
        implementation project(":api")
    }

    task cleanAcceptanceTesting(type: Exec) {
        workingDir project.rootProject.rootDir.getAbsolutePath() + '/acceptance-testing/src/test/'
        commandLine 'bash', '-c', 'rm -f c/libpnitest.dylib && rm -f c/libpnitest.so && rm -f c/pnitest.dll && rm -rf c-generated/* && rm -rf generated/*'
    }
    task generateAcceptanceTesting(type: JavaExec) {
        classpath = project(":pni").sourceSets.main.runtimeClasspath
        mainClass = 'io.vproxy.pni.exec.Main'
        systemProperty("io.vproxy.pni.Testing", "true")
        workingDir project.rootProject.rootDir.getAbsolutePath()
        args '-cp', 'acceptance-testing-template/build/classes/java/main', '-d', 'acceptance-testing/src/test/generated', '-h', 'acceptance-testing/src/test/c-generated'

        dependsOn cleanAcceptanceTesting
        dependsOn compileTestJava
    }
}

project(":acceptance-testing") {
    sourceSets {
        test {
            java {
                srcDirs = ['src/test/java', 'src/test/generated']
            }
        }
    }
    dependencies {
        implementation project(":api")
        testImplementation 'junit:junit:4.13.2'
    }

    task compilePNITestLib(type: Exec) {
        workingDir project.rootProject.rootDir.getAbsolutePath() + '/acceptance-testing/src/test/c'
        commandLine './make-test.sh'

        dependsOn project(':acceptance-testing-template').tasks.generateAcceptanceTesting
    }
    task runAcceptanceTest(type: Test) {
        jvmArgs += '-Djava.library.path=' +
                project.rootProject.rootDir.getAbsolutePath() + '/acceptance-testing/src/test/c'
        jvmArgs += '--add-opens'
        jvmArgs += 'java.base/java.io=ALL-UNNAMED'
        include '**/Suite.class'

        dependsOn compileTestJava
        dependsOn compilePNITestLib
    }
}

project(":sample") {
    compileJava {
        options.compilerArgs += '-parameters'
    }
    dependencies {
        implementation project(":api")
    }

    task generateSample(type: JavaExec) {
        classpath = project(":pni").sourceSets.main.runtimeClasspath
        mainClass = 'io.vproxy.pni.exec.Main'
        systemProperty("io.vproxy.pni.Testing", "true")
        workingDir project.rootProject.rootDir.getAbsolutePath()
        args '-cp', 'sample/build/classes/java/main', '-d', 'sample/src/main/java', '-h', 'sample/src/main/c'

        dependsOn compileJava
    }
    task compilePNISampleLib(type: Exec) {
        workingDir project.rootProject.rootDir.getAbsolutePath() + '/sample/src/main/c'
        commandLine './make-sample.sh'

        dependsOn generateSample
    }
    task runSample(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'io.vproxy.pni.sample.Main'
        jvmArgs += '-Djava.library.path=' +
                project.rootProject.rootDir.getAbsolutePath() + '/sample/src/main/c'

        dependsOn compileJava
        dependsOn compilePNISampleLib
    }
}

project(":playground") {
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/template', 'src/main/java', 'src/main/generated']
            }
        }
    }
    compileJava {
        options.compilerArgs += '-parameters'
    }
    dependencies {
        implementation project(":api")
    }

    task generatePlayground(type: JavaExec) {
        classpath = project(":pni").sourceSets.main.runtimeClasspath
        mainClass = 'io.vproxy.pni.exec.Main'
        workingDir project.rootProject.rootDir.getAbsolutePath()
        args '-cp', 'playground/build/classes/java/main', '-d', 'playground/src/main/generated', '-h', 'playground/src/main/c-generated'

        dependsOn compileJava
    }
    task compilePNIPlaygroundLib(type: Exec) {
        workingDir project.rootProject.rootDir.getAbsolutePath() + '/playground/src/main/c'
        commandLine './make-playground.sh'

        dependsOn generatePlayground
    }
    task runPlayground(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'io.vproxy.pni.playground.Main'
        jvmArgs += '-Djava.library.path=' +
                project.rootProject.rootDir.getAbsolutePath() + '/playground/src/main/c'

        dependsOn compileJava
        dependsOn compilePNIPlaygroundLib
    }
}

def loadVersion() {
    def PREFIX = "final String _VERSION = \""
    def SUFFIX = "\"; // _THE_VERSION_"
    def ver = file(projectDir.getAbsolutePath() + "/pni/src/main/java/io/vproxy/pni/exec/Main.java")
    def lines = ver.getText().split("\n")
    def isMavenLocalInstall = System.getProperty("MavenLocalInstall", "false").equals("true")
    for (def line : lines) {
        line = line.trim()
        if (line.startsWith(PREFIX) && line.endsWith(SUFFIX)) {
            def verstr = line.substring(PREFIX.length(), line.length() - SUFFIX.length())
            if (verstr.endsWith('-DEV')) {
                if (isMavenLocalInstall) {
                    return "MAVEN-LOCAL"
                } else {
                    verstr = verstr + '-SNAPSHOT'
                }
            }
            return verstr
        }
    }
    return "unknown"
}
